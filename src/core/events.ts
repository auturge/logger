
type EventArgsMap = Record<string, any> | void;

/** Represents the method that will handle an event when the event provides data. */
export type EventHandler<TEventArgs extends EventArgsMap = void> = (args: TEventArgs) => void;

/** Emits custom events, and register handlers for those events by subscribing to an instance.
 * @type TEventArgs The type of the event data generated by the event.
 */
export interface IEmitter<TEventArgs extends EventArgsMap = void> {

    /** Emits an event using the given arguments.
     * @param args The arguments to emit.
    */
    emit(args: TEventArgs): void;

    /** Adds the given event handler to the list of subscribers.
     * @param handler The event handler function.
    */
    subscribe(handler: EventHandler<TEventArgs>): void;

    /** Removes an event handler from the list of subscribers.
     * @param handler The event handler to remove.
    */
    unsubscribe(handler: EventHandler<TEventArgs>): void;

    /** Clears the list of subscribers. */
    clear(): void;
}

export class Emitter<TEventArgs extends EventArgsMap = void> implements IEmitter<TEventArgs> {
    private _handlers: EventHandler<TEventArgs>[] = [];

    public get subscribers(): EventHandler<TEventArgs>[] {
        return this._handlers;
    }

    public emit(args: TEventArgs): void {
        // iterate over a copy of the array of listeners, and call them.
        this._handlers.slice(0).forEach(h => h(args));
    }

    public subscribe(handler: EventHandler<TEventArgs>): void {
        this._handlers.push(handler);
    }

    public unsubscribe(handler: EventHandler<TEventArgs>): void {
        this._handlers = this._handlers.filter(h => h !== handler);
    }

    public clear(): void {
        this._handlers = [];
    }
}
